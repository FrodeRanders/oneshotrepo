<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>
        OBSERVE:
        Corresponds to class org.gautelis.repo.model.Statements
    </comment>

    <!--
      Get all tenants from repo_tenant table.
    -->
    <entry key="sql.tenant.get_all">
        SELECT tenantid, name, description, created FROM repo_tenant
    </entry>

    <!--
      Delete a specific unit from repo_unit table.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.unit.delete">
        DELETE FROM repo_unit WHERE (tenantid=? AND unitid=?)
    </entry>
    
    <!--
      Check existence of unit, regardless of status.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.unit.exists">
        SELECT tenantid, unitid FROM repo_unit WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Get status of unit.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.unit.get_status">
        SELECT status FROM repo_unit WHERE (tenantid=? AND unitid=?)
    </entry>
    
    <!--
      Get latest version of unit.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.unit.get">
        SELECT * FROM repo_unit WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Store a new unit. Let database assign modification time.
      Call with: (tenantId, corrId, status, name)
      A unitId will be generated.
    -->
    <entry key="sql.unit.insert_new">
        INSERT INTO repo_unit (tenantid,corrid,status,name) VALUES (?,?,?,?)
    </entry>

    <!--
      Set/update status of unit.
      Call with: (status, tenantId, unitId)
    -->
    <entry key="sql.unit.set_status">
        UPDATE repo_unit SET status=? WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Update unit information (TODO Only name for now)
      Call with: (name, tenantId, unitId)
    -->
    <entry key="sql.unit.update">
        UPDATE repo_unit SET name=? WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Find all attributes associated with a specific version of a unit.
      Values in the value vector are returned in ascending index order.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.unit.get_attributes">
        SELECT av.tenantid, av.unitid, av.attrid, av.valueid, p.attrname, p.attrtype,
        sv.val AS stringval, tv.val AS timeval, iv.val AS intval, lv.val AS longval, dov.val AS doubleval, bv.val AS boolval, dv.val AS dataval
        FROM repo_attribute p
        INNER JOIN repo_attribute_value av ON (p.attrid=av.attrid)
        LEFT OUTER JOIN repo_string_vector sv ON (av.valueid=sv.valueid)
        LEFT OUTER JOIN repo_time_vector tv ON (av.valueid=tv.valueid)
        LEFT OUTER JOIN repo_integer_vector iv ON (av.valueid=iv.valueid)
        LEFT OUTER JOIN repo_long_vector lv ON (av.valueid=lv.valueid)
        LEFT OUTER JOIN repo_double_vector dov ON (av.valueid=dov.valueid)
        LEFT OUTER JOIN repo_boolean_vector bv ON (av.valueid=bv.valueid)
        LEFT OUTER JOIN repo_data_vector dv ON (av.valueid=dv.valueid)
        WHERE av.tenantid=? AND av.unitid=?
        ORDER BY av.valueid, sv.idx, tv.idx, iv.idx, lv.idx, dov.idx, bv.idx, dv.idx ASC
    </entry>

    <!--
      Bind a specific unit to a specific version of an attribute and it's value.
      Call with: (tenantId, unitId, attrId)
      A valueId will be generated.
    -->
    <entry key="sql.attribute.insert">
        INSERT INTO repo_attribute_value (tenantid,unitid,attrid) VALUES (?,?,?)
    </entry>

    <!--
      Delete all attributes associated with a unit.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.attribute.delete">
        DELETE FROM repo_attribute_value WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Get all available attributes.
    -->
    <entry key="sql.attribute.get_all">
        SELECT attrid, attrname, attrtype, scalar, created FROM repo_attribute
    </entry>

    <!--
      Store a date attribute value.
      Call with: (valueId, <index>, <date value>)
    -->
    <entry key="sql.value.date_insert">
        INSERT INTO repo_time_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Store a double attribute value.
      Call with: (valueId, <index>, <float value>)
    -->
    <entry key="sql.value.double_insert">
        INSERT INTO repo_double_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Store a boolean attribute value.
      Call with: (valueId, <index>, <boolean value>)
    -->
    <entry key="sql.value.boolean_insert">
        INSERT INTO repo_boolean_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Store a string attribute value.
      Call with: (valueId, <index>, <string value>)
    -->
    <entry key="sql.value.string_insert">
        INSERT INTO repo_string_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Store a data (BLOB) attribute value.
      Call with: (valueId, <index>, <data value>)
    -->
    <entry key="sql.value.data_insert">
        INSERT INTO repo_data_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Store an integer attribute value.
      Call with: (valueId, <index>, <integer value>)
    -->
    <entry key="sql.value.integer_insert">
        INSERT INTO repo_integer_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Store a long attribute value.
      Call with: (valueId, <index>, <long value>)
    -->
    <entry key="sql.value.long_insert">
        INSERT INTO repo_long_vector (valueid, idx, val) VALUES (?,?,?)
    </entry>

    <!--
      Delete entry for unit from the lock table.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.lock.delete_all">
        DELETE FROM repo_lock WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Get all locks for a unit.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.lock.get_all">
        SELECT * FROM repo_lock WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Insert entry into the lock table.
      Call with: (tenantId, unitId, purpose, lockType, expireTime)
    -->
    <entry key="sql.lock.insert">
        INSERT INTO repo_lock (tenantid,unitid,purpose,locktype,expire) VALUES (?,?,?,?,?)
    </entry>

    <!--
      Get log entries for specific unit.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.log.get_entries">
        SELECT tenantid, unitid, unitver, event, logentry, logtime
        FROM repo_log
        WHERE (tenantid=? AND unitid=?) ORDER BY logtime ASC
    </entry>

    <!--
      Delete entries in the (audit) log for specific unit (tenantId, unitId).
      If entries are to be left behind, the foreign key constraint has to be removed!
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.log.delete_entries">
        DELETE FROM repo_log WHERE (tenantid=? AND unitid=?)
    </entry>

    <!--
      Count all external left associations for specified external entity.
      Call with: (assocType, assocString)
    -->
    <entry key="sql.assoc.count_left_external_assocs">
        SELECT COUNT(*) FROM repo_external_assoc WHERE assoctype=? AND assocstring=?
    </entry>

    <!--
      Count all internal left associations for specified unit.
      Call with: (assocType, assocTenantId, assocUnitId)
    -->
    <entry key="sql.assoc.count_left_internal_assocs">
        SELECT COUNT(*) FROM repo_internal_assoc WHERE assoctype=? AND assoctenantid=? AND assocunitid=?
    </entry>

    <!--
      Count all external right associations for specified unit.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.count_right_external_assocs">
        SELECT COUNT(*) FROM repo_external_assoc WHERE tenantid=? AND unitid=? and assoctype=?
    </entry>

    <!--
      Count all internal right associations for specified unit.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.count_right_internal_assocs">
        SELECT COUNT(*) FROM repo_internal_assoc WHERE tenantid=? AND unitid=? and assoctype=?
    </entry>

    <!--
      Get all left external associations.
      Call with: (assocType, assocString)
    -->
    <entry key="sql.assoc.get_all_left_external_assocs">
        SELECT tenantid, unitid, assoctype, assocstring, associd FROM repo_external_assoc WHERE assoctype=? AND assocstring=?
    </entry>

    <!--
      Get all left internal associations.
      Call with: (assocType, assocTenantId, assocUnitId)
    -->
    <entry key="sql.assoc.get_all_left_internal_assocs">
        SELECT tenantid, unitid, assoctype, assoctenantid, assocunitid FROM repo_internal_assoc WHERE assoctype=? AND assoctenantid=? AND assocunitid=?
    </entry>

    <!--
      Get all right external associations.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.get_all_right_external_assocs">
        SELECT tenantid, unitid, assoctype, assocstring, associd FROM repo_external_assoc WHERE tenantid=? AND unitid=? AND assoctype=?
    </entry>

    <!--
      Get all right internal associations.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.get_all_right_internal_assocs">
        SELECT tenantid, unitid, assoctype, assoctenantid, assocunitid FROM repo_internal_assoc WHERE tenantid=? AND unitid=? AND assoctype=?
    </entry>

    <!--
      Get all external associations from unit to a specific entity
      Call with: (tenantId, unitId, assocType, assocString)
    -->
    <entry key="sql.assoc.get_all_specific_external_assocs">
        SELECT tenantid, unitid, assoctype, assocstring, associd FROM repo_external_assoc WHERE tenantid=? AND unitid=? AND assoctype=? AND assocstring=?
    </entry>

    <!--
      Get right internal association.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.get_right_internal_assoc">
        SELECT tenantid, unitid, assoctype, assoctenantid, assocunitid FROM repo_internal_assoc WHERE tenantid=? AND unitid=? AND assoctype=?
    </entry>

    <!--
      Remove all external associations for specified unit.
      Call with: (tenantId, unitId)
    -->
    <entry key="sql.assoc.remove_all_external_assocs">
        DELETE FROM repo_external_assoc WHERE tenantid=? AND unitid=?
    </entry>

    <!--
      Remove all internal associations for specified unit.
      Call with: (tenantId, unitId, assocTenantId, assocUnitId)
    -->
    <entry key="sql.assoc.remove_all_internal_assocs">
        DELETE FROM repo_internal_assoc WHERE (tenantid=? AND unitid=?) OR (assoctenantid=? AND assocunitid=?)
    </entry>

    <!--
      Remove all right external associations for specified unit.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.remove_all_right_external_assocs">
        DELETE FROM repo_external_assoc WHERE tenantid=? AND unitid=? AND assoctype=?
    </entry>

    <!--
      Remove all right internal associations for specified unit.
      Call with: (tenantId, unitId, assocType)
    -->
    <entry key="sql.assoc.remove_all_right_internal_assocs">
        DELETE FROM repo_internal_assoc WHERE tenantid=? AND unitid=? AND assoctype=?
    </entry>

    <!--
      Remove specific external association.
      Call with: (tenantId, unitId, assocType, assocString, assocId)
    -->
    <entry key="sql.assoc.remove_specific_external_assoc">
        DELETE FROM repo_external_assoc WHERE tenantid=? AND unitid=? AND assoctype=? AND assocstring=? AND associd=?
    </entry>

    <!--
      Remove specific internal association.
      Call with: (tenantId, unitId, assocType, assocTenantId, assocUnitId)
    -->
    <entry key="sql.assoc.remove_specific_internal_assoc">
        DELETE FROM repo_internal_assoc WHERE tenantid=? AND unitid=? AND assoctype=? AND assoctenantid=? AND assocunitid=?
    </entry>

    <!--
      Store external association.
      Call with: (tenantId, unitId, assocType, assocString)
    -->
    <entry key="sql.assoc.store_external_assoc">
        INSERT INTO repo_external_assoc (tenantid, unitid, assoctype, assocstring) VALUES (?, ?, ?, ?)
    </entry>

    <!--
      Store internal association.
      Call with: (tenantId, unitId, assocType, assocTenantId, assocUnitId)
    -->
    <entry key="sql.assoc.store_internal_assoc">
        INSERT INTO repo_internal_assoc (tenantid, unitid, assoctype, assoctenantid, assocunitid) VALUES (?, ?, ?, ?, ?)
    </entry>
</properties>



